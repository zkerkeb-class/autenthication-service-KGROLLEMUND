const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const axios = require('axios');
const crypto = require('crypto');

// Configuration des URLs de services
const DB_SERVICE_URL = process.env.DB_SERVICE_URL || 'http://localhost:3004';
const NOTIFICATION_SERVICE_URL = process.env.NOTIFICATION_SERVICE_URL || 'http://localhost:3006';
const JWT_SECRET = process.env.JWT_SECRET || 'secret';
const SALT_ROUNDS = 10;
console.log('JWT_SECRET here2:', process.env.JWT_SECRET);

/**
 * Formate et valide un num√©ro de t√©l√©phone au format international
 */
const formatPhoneNumber = (phone) => {
  if (!phone) return null;
  
  // Supprimer tous les espaces, tirets, points, parenth√®ses
  let cleaned = phone.replace(/[\s\-\.\(\)]/g, '');
  
  // Si √ßa commence d√©j√† par +, garder tel quel
  if (cleaned.startsWith('+')) {
    return cleaned;
  }
  
  // Si √ßa commence par 0 (num√©ro fran√ßais), remplacer par +33
  if (cleaned.startsWith('0')) {
    return '+33' + cleaned.substring(1);
  }
  
  // Si √ßa commence par 33 (sans le +), ajouter le +
  if (cleaned.startsWith('33')) {
    return '+' + cleaned;
  }
  
  // Si c'est un num√©ro √† 10 chiffres qui commence par 6 ou 7 (mobile fran√ßais)
  if (cleaned.length === 10 && (cleaned.startsWith('6') || cleaned.startsWith('7'))) {
    return '+33' + cleaned;
  }
  
  // Pour les autres cas, ajouter un + si ce n'est que des chiffres
  if (/^\d+$/.test(cleaned)) {
    return '+' + cleaned;
  }
  
  return cleaned;
};

/**
 * Inscription d'un nouvel utilisateur
 */
exports.register = async (req, res) => {
  try {
    console.log('üîÑ D√©but de l\'inscription d\'un nouvel utilisateur');
    console.log('Donn√©es re√ßues:', { ...req.body, password: '***HIDDEN***' });
    
    const { name, email, password, phoneNumber, sector, specialties, yearsOfExperience } = req.body;

    if (!name || !email || !password) {
      console.log('‚ùå Validation √©chou√©e: champs manquants');
      return res.status(400).json({ message: 'Tous les champs sont requis' });
    }

    // V√©rifier si l'utilisateur existe d√©j√† (en tenant compte des comptes OAuth)
    try {
      const userCheckUrl = `${DB_SERVICE_URL}/api/users/email/${email}`;
      console.log('URL de v√©rification d\'utilisateur:', userCheckUrl);
      
      const userCheckResponse = await axios.get(userCheckUrl);
      console.log('R√©ponse de la v√©rification d\'utilisateur:', userCheckResponse.data);
      
      // Si un ou plusieurs utilisateurs sont trouv√©s
      if (userCheckResponse.data) {
        // Si c'est un tableau d'utilisateurs
        if (Array.isArray(userCheckResponse.data)) {
          console.log(`${userCheckResponse.data.length} utilisateurs trouv√©s avec cet email`);
          
          // V√©rifier s'il existe un compte classique (sans OAuth)
          const classicAccount = userCheckResponse.data.find(u => !u.oauthProvider);
          
          if (classicAccount) {
            console.log('‚ùå Un compte classique existe d√©j√† avec cet email');
            return res.status(409).json({ message: 'Cet email est d√©j√† utilis√© avec un compte standard' });
          }
          
          // V√©rifier s'il existe un compte OAuth
          const oauthAccount = userCheckResponse.data.find(u => u.oauthProvider);
          
          if (oauthAccount) {
            console.log(`‚ùå Un compte OAuth (${oauthAccount.oauthProvider}) existe d√©j√† avec cet email`);
            return res.status(409).json({ 
              message: `Cet email est d√©j√† utilis√© avec un compte ${oauthAccount.oauthProvider}. Essayez de vous connecter avec ce fournisseur.` 
            });
          }
        } 
        // Si c'est un objet unique (pour compatibilit√© avec l'ancienne API)
        else {
          const existingUser = userCheckResponse.data;
          console.log('Utilisateur existant trouv√©:', { ...existingUser, password: existingUser.password ? '***HIDDEN***' : null });
          
          // Si c'est un compte standard (non OAuth) ou un compte OAuth avec le m√™me email
          if (!existingUser.oauthProvider) {
            console.log('‚ùå Un compte classique existe d√©j√† avec cet email');
            return res.status(409).json({ message: 'Cet email est d√©j√† utilis√© avec un compte standard' });
          } else {
            console.log(`‚ùå Un compte OAuth (${existingUser.oauthProvider}) existe d√©j√† avec cet email`);
            return res.status(409).json({ 
              message: `Cet email est d√©j√† utilis√© avec un compte ${existingUser.oauthProvider}. Essayez de vous connecter avec ce fournisseur.` 
            });
          }
        }
      }
    } catch (error) {
      // Si l'erreur est 404, l'utilisateur n'existe pas - c'est normal
      if (error.response && error.response.status === 404) {
        console.log('‚úÖ Aucun utilisateur existant trouv√© avec cet email, inscription possible');
      } else if (error.response) {
        console.error('‚ùå Erreur lors de la v√©rification de l\'utilisateur:', error.response.status, error.response.data);
        return res.status(500).json({ message: 'Erreur serveur lors de la v√©rification de l\'utilisateur' });
      } else {
        console.error('‚ùå Erreur lors de la v√©rification de l\'utilisateur:', error.message);
        return res.status(500).json({ message: 'Erreur serveur lors de la v√©rification de l\'utilisateur' });
      }
    }

    // Hasher le mot de passe
    console.log('Hachage du mot de passe...');
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    console.log('Mot de passe hach√© avec succ√®s');
    
    // G√©n√©rer un token de v√©rification d'email
    const verificationToken = crypto.randomBytes(32).toString('hex');
    console.log('Token de v√©rification g√©n√©r√©');

    // Formater le num√©ro de t√©l√©phone au format international
    const formattedPhoneNumber = formatPhoneNumber(phoneNumber);
    console.log('Num√©ro de t√©l√©phone format√©:', phoneNumber, '->', formattedPhoneNumber);

    // Cr√©er l'utilisateur
    const userData = {
      name,
      email,
      password: hashedPassword,
      isAdmin: false,
      isSubscribed: false,
      oauthProvider: null,
      oauthProviderId: null,
      verificationToken,
      isVerified: false,
      sector: sector || null,
      phoneNumber: formattedPhoneNumber
    };
    
    console.log('Tentative de cr√©ation de l\'utilisateur avec les donn√©es:', { ...userData, password: '***HIDDEN***' });

    // Enregistrer l'utilisateur en BDD
    try {
      const createUserUrl = `${DB_SERVICE_URL}/api/users`;
      console.log('URL de cr√©ation d\'utilisateur:', createUserUrl);
      
      const createUserResponse = await axios.post(createUserUrl, userData);
      console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', { ...createUserResponse.data, password: createUserResponse.data.password ? '***HIDDEN***' : null });
      
      const newUser = createUserResponse.data;
      
      // Si des donn√©es de profil professionnel sont fournies, cr√©er le profil
      if (sector && specialties && yearsOfExperience) {
        try {
          console.log('Tentative de cr√©ation du profil professionnel...');
          const profileData = {
            userId: newUser.id,
            sector: sector,
            specialties: specialties,
            yearsOfExperience: parseInt(yearsOfExperience) || 0,
            skills: []
          };
          
          await axios.post(`${DB_SERVICE_URL}/api/professional-profiles`, profileData);
          console.log(`‚úÖ Profil professionnel cr√©√© pour l'utilisateur ${newUser.id}`);
        } catch (profileError) {
          console.error('‚ùå Erreur lors de la cr√©ation du profil professionnel:', profileError.response?.data || profileError.message);
          // On continue m√™me si la cr√©ation du profil √©choue
        }
      }
      
      // G√©n√©rer le token JWT
      console.log('G√©n√©ration du token JWT...');
      const token = jwt.sign(
        { userId: newUser.id, email: newUser.email },
        JWT_SECRET,
        { expiresIn: '24h' }
      );
      console.log('Token JWT g√©n√©r√© avec succ√®s');

      // Envoyer l'email de v√©rification
      try {
        console.log('Tentative d\'envoi de l\'email de v√©rification...');
        await axios.post(`${NOTIFICATION_SERVICE_URL}/notifications/email-verification`, {
          to: email,
          name: name,
          verificationToken: verificationToken,
          verificationUrl: `${process.env.CLIENT_URL || 'http://localhost:3000'}/verify-email?token=${verificationToken}&email=${encodeURIComponent(email)}`
        });
        console.log(`‚úÖ Email de v√©rification envoy√© √† ${email}`);
      } catch (notifError) {
        console.error('‚ùå Erreur lors de l\'envoi de l\'email de v√©rification:', notifError.response?.data || notifError.message);
        // On continue m√™me si l'envoi √©choue
      }

      // Retourner les donn√©es utilisateur sans le mot de passe
      const { password: _, ...userWithoutPassword } = newUser;
      console.log('‚úÖ Inscription termin√©e avec succ√®s');
      res.status(201).json({ 
        message: 'Utilisateur cr√©√© avec succ√®s. Veuillez v√©rifier votre email.',
        user: userWithoutPassword,
        token
      });
    } catch (createError) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur:', createError.response?.data || createError.message);
      if (createError.response) {
        console.error('Status:', createError.response.status);
        console.error('Donn√©es d\'erreur:', createError.response.data);
      }
      res.status(500).json({ message: 'Erreur lors de l\'inscription', details: createError.response?.data || createError.message });
    }
  } catch (error) {
    console.error('‚ùå Erreur globale lors de l\'inscription:', error);
    res.status(500).json({ message: 'Erreur lors de l\'inscription' });
  }
};

/**
 * Connexion d'un utilisateur
 */
exports.login = async (req, res) => {
  try {
    console.log('üîÑ Tentative de connexion');
    const { email, password } = req.body;
    console.log('req.body:', req.body);
    console.log('email:', email);
    console.log('password:', password ? '***HIDDEN***' : 'MISSING');

    if (!email || !password) {
      return res.status(400).json({ message: 'Email et mot de passe requis' });
    }

    // R√©cup√©rer l'utilisateur par email
    let user;
    try {
      const userResponse = await axios.get(`${DB_SERVICE_URL}/api/users/email/${email}`, {
        headers: {
          'X-Service': 'auth-service',
          'Origin': 'http://localhost:3001'
        }
      });
      user = userResponse.data;
      console.log('user:', user);
      console.log('Utilisateur trouv√©:', { 
        id: user.id, 
        email: user.email, 
        hasPassword: user.password,
        passwordLength: user.password ? user.password.length : 0
      });
    } catch (error) {
      if (error.response && error.response.status === 404) {
        return res.status(401).json({ message: 'Email ou mot de passe incorrect' });
      }
      throw error;
    }

    // V√©rifier si c'est un compte OAuth (qui ne peut pas se connecter avec mot de passe)
    if (user.oauthProvider) {
      return res.status(400).json({ 
        message: `Ce compte utilise l'authentification via ${user.oauthProvider}. Veuillez vous connecter avec ce service.` 
      });
    }
    
    // V√©rifier si le mot de passe existe dans l'objet utilisateur
    if (!user.password) {
      console.error('‚ùå Mot de passe manquant dans les donn√©es utilisateur');
      return res.status(401).json({ message: 'Compte invalide. Veuillez contacter le support.' });
    }

    // V√©rifier le mot de passe
    console.log('V√©rification du mot de passe avec bcrypt...');
    try {
      const isPasswordValid = await bcrypt.compare(password, user.password);
      console.log('R√©sultat de la v√©rification:', isPasswordValid);
      
      if (!isPasswordValid) {
        return res.status(401).json({ message: 'Email ou mot de passe incorrect' });
      }
    } catch (bcryptError) {
      console.error('‚ùå Erreur bcrypt lors de la v√©rification du mot de passe:', bcryptError);
      return res.status(500).json({ message: 'Erreur lors de la v√©rification du mot de passe' });
    }

    // V√©rifier si l'email est v√©rifi√©
    if (user.verificationToken && !user.isVerified) {
      return res.status(403).json({ 
        message: 'Veuillez v√©rifier votre adresse email avant de vous connecter',
        needsVerification: true,
        email: user.email
      });
    }

    // G√©n√©rer le token JWT
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '24h' }
    );

    // Supprimer le mot de passe de la r√©ponse
    const { password: _, ...userWithoutPassword } = user;
    console.log('Connexion r√©ussie, renvoi des donn√©es utilisateur sans mot de passe');

    res.json({ 
      message: 'Connexion r√©ussie',
      user: userWithoutPassword,
      token
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la connexion:', error);
    res.status(500).json({ message: 'Erreur lors de la connexion' });
  }
};

/**
 * V√©rification de l'email de l'utilisateur
 */
exports.verifyEmail = async (req, res) => {
  try {
    const { token, email } = req.body;

    console.log('üîç Tentative de v√©rification d\'email');
    console.log('Token re√ßu:', token);
    console.log('Email re√ßu:', email);

    if (!token || !email) {
      console.log('‚ùå Token ou email manquant');
      return res.status(400).json({ message: 'Token et email requis' });
    }

    // V√©rifier si l'utilisateur existe
    let user;
    try {
      console.log(`üîç Recherche de l'utilisateur avec l'email: ${email}`);
      const userResponse = await axios.get(`${DB_SERVICE_URL}/api/users/email/${email}`, {
        headers: {
          'X-Service': 'auth-service',
          'Origin': 'http://localhost:3001'
        }
      });
      user = userResponse.data;
      console.log('‚úÖ Utilisateur trouv√©:', { ...user, password: user.password ? '***HIDDEN***' : null });
      
      // Si l'utilisateur est un tableau (plusieurs utilisateurs avec le m√™me email)
      if (Array.isArray(user)) {
        console.log(`‚ö†Ô∏è Plusieurs utilisateurs trouv√©s avec l'email ${email}`);
        // Rechercher un utilisateur avec le token de v√©rification correspondant
        const matchingUser = user.find(u => u.verificationToken === token);
        
        if (!matchingUser) {
          console.log('‚ùå Aucun utilisateur trouv√© avec ce token de v√©rification');
          return res.status(400).json({ message: 'Token de v√©rification invalide' });
        }
        
        user = matchingUser;
        console.log('‚úÖ Utilisateur correspondant trouv√©:', { ...user, password: user.password ? '***HIDDEN***' : null });
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche de l\'utilisateur:', error.response?.data || error.message);
      if (error.response && error.response.status === 404) {
        return res.status(404).json({ message: 'Utilisateur non trouv√©' });
      }
      throw error;
    }

    // V√©rifier si le token correspond
    console.log(`üîç V√©rification du token: ${token}`);
    console.log(`Token de l'utilisateur: ${user.verificationToken}`);
    
    if (user.verificationToken !== token) {
      console.log('‚ùå Token de v√©rification invalide');
      return res.status(400).json({ message: 'Token de v√©rification invalide' });
    }

    // Mettre √† jour l'utilisateur
    console.log(`üîÑ Mise √† jour de l'utilisateur ${user.id} pour valider l'email`);
    await axios.put(`${DB_SERVICE_URL}/api/users/${user.id}`, {
      isVerified: true,
      verificationToken: null
    });
    console.log('‚úÖ Email v√©rifi√© avec succ√®s');

    // Envoyer une notification de bienvenue
    try {
      console.log(`üìß Envoi de l'email de bienvenue √† ${email}`);
      await axios.post(`${NOTIFICATION_SERVICE_URL}/notifications/welcome`, {
        to: email,
        name: user.name
      });
      console.log(`‚úÖ Email de bienvenue envoy√© √† ${email}`);
    } catch (notifError) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email de bienvenue:', notifError.response?.data || notifError.message);
      // On continue m√™me si l'envoi √©choue
    }

    // G√©n√©rer un token JWT pour l'authentification automatique
    console.log('üîë G√©n√©ration du token JWT pour authentification automatique');
    const jwtToken = jwt.sign(
      { userId: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '24h' }
    );
    console.log('‚úÖ Token JWT g√©n√©r√© avec succ√®s');

    // Retourner le token avec la r√©ponse
    res.json({ 
      message: 'Email v√©rifi√© avec succ√®s',
      token: jwtToken,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        isProfileCompleted: user.isProfileCompleted || false,
        isAdmin: user.isAdmin || false,
        sector: user.sector || null
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de l\'email:', error.response?.data || error.message);
    res.status(500).json({ message: 'Erreur lors de la v√©rification de l\'email' });
  }
};

/**
 * Demande de r√©initialisation de mot de passe par SMS uniquement
 */
exports.requestPasswordReset = async (req, res) => {
  try {
    const { phoneNumber } = req.body;

    // V√©rifier que le num√©ro de t√©l√©phone est fourni
    if (!phoneNumber) {
      return res.status(400).json({ message: 'Num√©ro de t√©l√©phone requis' });
    }

    // Formater le num√©ro de t√©l√©phone
    const formattedPhoneNumber = formatPhoneNumber(phoneNumber);
    console.log('Num√©ro format√© pour recherche:', formattedPhoneNumber);

    // V√©rifier si l'utilisateur existe
    let user;
    try {
      const userResponse = await axios.get(`${DB_SERVICE_URL}/api/users/phone/${formattedPhoneNumber}`, {
        headers: {
          'X-Service': 'auth-service',
          'Origin': 'http://localhost:3001'
        }
      });
      user = userResponse.data;
    } catch (error) {
      // Si l'utilisateur n'existe pas, on renvoie quand m√™me un succ√®s pour √©viter la divulgation d'informations
      if (error.response && error.response.status === 404) {
        return res.json({ message: 'Si ce num√©ro existe, un SMS de r√©initialisation a √©t√© envoy√©' });
      }
      throw error;
    }

    // V√©rifier si c'est un compte OAuth (qui ne peut pas r√©initialiser son mot de passe)
    if (user.oauthProvider) {
      return res.status(400).json({ 
        message: `Ce compte utilise l'authentification via ${user.oauthProvider}. Le mot de passe ne peut pas √™tre r√©initialis√©.` 
      });
    }

    // G√©n√©rer un code court √† 6 chiffres pour SMS
    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();
    const resetTokenExpiry = new Date(Date.now() + 900000); // 15 minutes

    // Mettre √† jour l'utilisateur avec le code de r√©initialisation
    await axios.put(`${DB_SERVICE_URL}/api/users/${user.id}`, {
      resetCode,
      resetTokenExpiry: resetTokenExpiry.toISOString()
    });

    // Envoyer le SMS avec le code de r√©initialisation
    try {
      await axios.post(`${NOTIFICATION_SERVICE_URL}/notifications/password-reset-sms`, {
        to: formattedPhoneNumber,
        name: user.name,
        resetCode
      });
      console.log(`‚úÖ SMS de r√©initialisation de mot de passe envoy√© √† ${formattedPhoneNumber}`);
    } catch (notifError) {
      console.error('‚ùå Erreur lors de l\'envoi du SMS de r√©initialisation:', notifError);
      // On continue m√™me si l'envoi √©choue
    }

    res.json({ 
      message: 'Si ce num√©ro existe, un SMS de r√©initialisation a √©t√© envoy√©'
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la demande de r√©initialisation:', error);
    res.status(500).json({ message: 'Erreur lors de la demande de r√©initialisation' });
  }
};

/**
 * D√©connexion d'un utilisateur
 */
exports.logout = async (req, res) => {
  try {
    console.log('üîÑ D√©but du processus de d√©connexion');
    console.log('Headers re√ßus:', req.headers);
    console.log('Body re√ßu:', req.body);
    
    // R√©cup√©rer le token depuis l'en-t√™te d'autorisation
    const authHeader = req.headers.authorization;
    let provider = '';
    let token = '';
    
    // R√©cup√©rer le provider depuis le corps de la requ√™te
    if (req.body && req.body.provider) {
      provider = req.body.provider;
      console.log(`üî∂ Provider fourni dans la requ√™te: ${provider}`);
    }
    
    // Essayer d'extraire les informations du token
    let userId = null;
    
    if (authHeader) {
      token = authHeader.split(' ')[1];
      
      if (token) {
        console.log('üîë Token re√ßu:', token.substring(0, 10) + '...');
        
        // Tenter d'extraire le userId et le provider du token
        try {
          const tokenParts = token.split('.');
          if (tokenParts.length === 3) {
            const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
            console.log('Payload du token:', payload);
            
            // Extraire le userId et le provider
            userId = payload.userId;
            provider = payload.provider || payload.oauthProvider || '';
            console.log(`üî∂ Provider extrait du token: ${provider}`);
            console.log(`üî∂ UserId extrait du token: ${userId}`);
          }
        } catch (e) {
          console.error('‚ùå Erreur lors du d√©codage du token:', e);
        }
        
        // Si on a le userId mais pas le provider, essayer de le r√©cup√©rer depuis la base de donn√©es
        if (userId && !provider) {
          console.log('üîç Recherche du provider dans la base de donn√©es pour userId:', userId);
          try {
            const userResponse = await axios.get(`${process.env.DB_SERVICE_URL || 'http://localhost:3004'}/api/users/${userId}`);
            if (userResponse.data && userResponse.data.oauthProvider) {
              provider = userResponse.data.oauthProvider;
              console.log(`üî∂ Provider trouv√© dans la base de donn√©es: ${provider}`);
            } else {
              console.log('‚ö†Ô∏è Utilisateur trouv√© mais sans provider OAuth');
            }
          } catch (dbError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration de l\'utilisateur:', dbError.message);
          }
        }
        
        // Dans un syst√®me de production, on ajouterait le token √† une liste noire
        // ou on le stockerait avec une date d'expiration dans Redis/base de donn√©es
        console.log('Token invalid√©:', token.substring(0, 10) + '...');
      }
    } else {
      console.log('‚ö†Ô∏è Aucun token fourni dans l\'en-t√™te Authorization');
    }
    
    // IMPORTANT: Ne pas utiliser req.logout() ni req.session.destroy() car cela cause un crash
    // avec la configuration actuelle de session
    console.log('‚ö†Ô∏è D√©connexion g√©r√©e uniquement c√¥t√© client pour √©viter les erreurs de session');
    
    // Ajouter des instructions sp√©cifiques au fournisseur
    let logoutInstructions = {};
    if (provider) {
      console.log(`üî∂ Configuration de la d√©connexion pour le provider: ${provider}`);
      
      switch (provider.toLowerCase()) {
        case 'google':
          logoutInstructions = {
            redirectUrl: 'https://accounts.google.com/Logout?continue=https://appengine.google.com/_ah/logout',
            needsRedirect: true
          };
          console.log('Instructions pour Google:', logoutInstructions);
          break;
        case 'github':
          logoutInstructions = {
            redirectUrl: 'https://github.com/logout', 
            needsRedirect: false,
            additionalCleanup: true
          };
          console.log('Instructions pour GitHub:', logoutInstructions);
          break;
        case 'linkedin':
          logoutInstructions = {
            redirectUrl: 'https://www.linkedin.com/oauth/v2/logout',
            needsRedirect: false,
            additionalCleanup: true
          };
          console.log('Instructions pour LinkedIn:', logoutInstructions);
          break;
        default:
          console.log(`‚ö†Ô∏è Provider non reconnu: ${provider}`);
          break;
      }
    } else {
      console.log('‚ö†Ô∏è Aucun provider identifi√©, d√©connexion standard');
    }
    
    const response = { 
      success: true, 
      message: 'D√©connexion r√©ussie',
      instructions: 'Veuillez supprimer le token JWT c√¥t√© client',
      provider, // Inclure le provider dans la r√©ponse
      logoutInstructions
    };
    
    console.log('‚úÖ R√©ponse envoy√©e:', response);
    res.json(response);
  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©connexion:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la d√©connexion',
      error: error.message
    });
  }
};

/**
 * V√©rification du code de r√©initialisation re√ßu par SMS
 */
exports.verifyResetCode = async (req, res) => {
  try {
    const { phoneNumber, resetCode } = req.body;

    if (!phoneNumber || !resetCode) {
      return res.status(400).json({ message: 'Num√©ro de t√©l√©phone et code de r√©initialisation requis' });
    }

    console.log(`üîç V√©rification du code de r√©initialisation pour le num√©ro ${phoneNumber}`);

    // V√©rifier si l'utilisateur existe
    let user;
    try {
      const userResponse = await axios.get(`${DB_SERVICE_URL}/api/users/phone/${phoneNumber}`, {
        headers: {
          'X-Service': 'auth-service',
          'Origin': 'http://localhost:3001'
        }
      });
      user = userResponse.data;
    } catch (error) {
      if (error.response && error.response.status === 404) {
        return res.status(404).json({ message: 'Utilisateur non trouv√©' });
      }
      throw error;
    }

    // V√©rifier si le code correspond et n'est pas expir√©
    if (user.resetCode !== resetCode) {
      return res.status(400).json({ message: 'Code de r√©initialisation invalide' });
    }

    const now = new Date();
    const resetTokenExpiry = new Date(user.resetTokenExpiry);
    if (resetTokenExpiry < now) {
      return res.status(400).json({ message: 'Code de r√©initialisation expir√©' });
    }

    // G√©n√©rer un token temporaire pour autoriser la r√©initialisation
    const tempToken = jwt.sign(
      { userId: user.id, phoneNumber, purpose: 'reset-password' },
      JWT_SECRET,
      { expiresIn: '15m' }
    );

    res.json({ 
      message: 'Code de r√©initialisation valide',
      tempToken,
      userId: user.id
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du code de r√©initialisation:', error);
    res.status(500).json({ message: 'Erreur lors de la v√©rification du code de r√©initialisation' });
  }
};

/**
 * R√©initialisation du mot de passe avec code SMS
 */
exports.resetPasswordWithCode = async (req, res) => {
  try {
    const { tempToken, userId, password } = req.body;

    if (!tempToken || !userId || !password) {
      return res.status(400).json({ message: 'Token temporaire, ID utilisateur et nouveau mot de passe requis' });
    }

    // V√©rifier le token temporaire
    let decoded;
    try {
      decoded = jwt.verify(tempToken, JWT_SECRET);
      
      // V√©rifier que le token est bien pour la r√©initialisation de mot de passe
      if (decoded.purpose !== 'reset-password' || decoded.userId !== userId) {
        return res.status(400).json({ message: 'Token temporaire invalide' });
      }
    } catch (jwtError) {
      return res.status(400).json({ message: 'Token temporaire invalide ou expir√©' });
    }

    // V√©rifier si l'utilisateur existe
    let user;
    try {
      const userResponse = await axios.get(`${DB_SERVICE_URL}/api/users/${userId}`, {
        headers: {
          'X-Service': 'auth-service',
          'Origin': 'http://localhost:3001'
        }
      });
      user = userResponse.data;
    } catch (error) {
      if (error.response && error.response.status === 404) {
        return res.status(404).json({ message: 'Utilisateur non trouv√©' });
      }
      throw error;
    }

    // Hasher le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(password, 10);

    // Mettre √† jour l'utilisateur
    await axios.put(`${DB_SERVICE_URL}/api/users/${userId}`, {
      password: hashedPassword,
      resetToken: null,
      resetCode: null,
      resetTokenExpiry: null
    });

    // Envoyer une notification de confirmation
    try {
      await axios.post(`${NOTIFICATION_SERVICE_URL}/notifications/password-changed`, {
        to: user.email,
        name: user.name
      });
      console.log(`‚úÖ Email de confirmation de changement de mot de passe envoy√© √† ${user.email}`);
    } catch (notifError) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email de confirmation:', notifError);
      // On continue m√™me si l'envoi √©choue
    }

    res.json({ message: 'Mot de passe r√©initialis√© avec succ√®s' });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation du mot de passe:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©initialisation du mot de passe' });
  }
};